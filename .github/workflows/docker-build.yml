name: CI/CD Pipeline - Build and Deploy

on:
  push:
    branches: [master, main, dev]
  workflow_dispatch: # Option to run manually from GitHub UI Actions tab

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write


    steps:
     - name: check out code
       uses: actions/checkout@v4

     - name: Log in to GitHub Container Registry
       uses: docker/login-action@v3
       with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }} # automatically created by github actions

     - name: Build and push docker Image
       uses: docker/build-push-action@v6
       with:
        context: src
        push: true
        tags: ghcr.io/mayyyk/devops_playground:latest

  deploy:
    name: Deploy to DigitalOcean Server using Ansible
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Inventory File # inventory.ini in ansible_project exists only locally, so we need to create it in the actions runner
        run: echo "${{ secrets.INVENTORY}}" > ansible_project/.ansible_inventory # create in root directory of the actions runner
        # Automatic generation of inventory possible when tf state file is remotely hosted
        shell: bash

      - name: Create Known Hosts File
        run: echo "${{ secrets.KNOWN_HOSTS}}" > my_known_hosts # create known_hosts file in root directory of the actions runner
        shell: bash

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Debug Secrets (Check if Empty)
        # This step uses bash to check if the secrets are empty
        # This avoids the 'length()' function which fails parsing.
        shell: bash
        run: |
          if [ -z "${{ secrets.INVENTORY }}" ]; then
            echo "::error:: Sekret INVENTORY jest PUSTY."
          else
            echo "Sekret INVENTORY jest OK (ma zawartość)."
          fi
          
          if [ -z "${{ secrets.KNOWN_HOSTS }}" ]; then
            echo "::error:: Sekret KNOWN_HOSTS jest PUSTY."
          else
            echo "Sekret KNOWN_HOSTS jest OK (ma zawartość)."
          fi
          
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "::error:: Sekret SSH_PRIVATE_KEY jest PUSTY."
          else
            echo "Sekret SSH_PRIVATE_KEY jest OK (ma zawartość)."
          fi
        
        # No need to install Ansible dependencies, I stick to basic modules only available in default ansible installation

      - name: Run Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          # Ścieżka do playbooka w repozytorium
          playbook: playbook.yml
          
          directory: ansible_project # go to this directory
          
          


          options: --extra-vars "ansible_ssh_common_args='-o UserKnownHostsFile=../my_known_hosts'"
     
